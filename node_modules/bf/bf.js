//A potential bug in prompt prevents us from reading input.
//That said, the "hello world" example works.
var prompt = require('prompt');
prompt.start();


var bf = function(code, cb) {

    function step(st8) {
        if (st8.instr < code.length) {
            var rules = 
                { '>+': function(m) {
                        st8.ptr += m.length;
                        st8.instr += m.length;
                        step(st8);
                     }
                , '<+': function(m) {
                        st8.ptr -= m.length;
                        st8.instr += m.length;
                        step(st8);
                    }
                , '\\++': function(m) {
                        st8.data[st8.ptr] = st8.data[st8.ptr]
                                          ? st8.data[st8.ptr] + m.length
                                          : m.length;
                        st8.instr += m.length;
                        step(st8);
                    }
                , '-+': function(m) {
                        st8.data[st8.ptr] = st8.data[st8.ptr]
                                          ? st8.data[st8.ptr] - m.length
                                          : -m.length;
                        st8.instr += m.length;
                        step(st8);
                    }
                , '\\.': function(m) {
                        st8.output += String.fromCharCode(st8.data[st8.ptr]);
                        st8.instr++;
                        step(st8);
                    }
                , ',': function(m) {
                        prompt.get(['c'], function(err, res) {
                            st8.data[st8.ptr] = res.c[0].charCodeAt();
                            st8.instr++;
                            step(st8);
                        });
                    }
                , '\\[': function(m) {
                        if (st8.data[st8.ptr]) {
                            st8.instr++;
                        } else {
                            //Find matching ], jump just past there
                            st8.instr += code.slice(st8.instr)
                                             .match(/]/) + 1;
                        }
                        step(st8);
                    }
                , '\\]': function(m) {
                        if (st8.data[st8.ptr]) {
                            //find matching [, jump just past there
                            st8.instr -= code.slice(0,st8.instr)
                                             .split('')
                                             .reverse()
                                             .join('')
                                             .match(/\[/)
                                             .index;
                        } else {
                            st8.instr++;
                        }
                        step(st8);
                    }
            }

            //Hacky thing, finds first key that satisfies match action.
            //You can see that 140bytes has totally fucked my interest
            //in writing *readable* for loops. :(
            for( var i=0, m, k;
                 !(m = code.slice(st8.instr)
                           .match(new RegExp('^'+
                               (k = Object.keys(rules)[i])
                           )));
                 i++);
            rules[k](m[0]);

        } else {
            cb(st8.output);
            prompt.pause();
        }
    }

    step({ 'instr': 0
         , 'data': []
         , 'ptr': 0 
         , 'output': ''});

}

module.exports = bf;
